/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CalculatorService.h"

#include "CalculatorService.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace calculator {

const char* CalculatorServiceAsyncClient::getServiceName() {
  return "CalculatorService";
}

void CalculatorServiceAsyncClient::ping(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  ::apache::thrift::RpcOptions rpcOptions;
  ping(rpcOptions, std::move(callback));
}

void CalculatorServiceAsyncClient::ping(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      pingT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      pingT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void CalculatorServiceAsyncClient::sync_ping() {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_ping(rpcOptions);
}

void CalculatorServiceAsyncClient::sync_ping(apache::thrift::RpcOptions& rpcOptions) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback2(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  ping(rpcOptions, std::move(callback2));
  getChannel()->getEventBase()->loopForever();
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_ping(_returnState);
}

folly::Future<folly::Unit> CalculatorServiceAsyncClient::future_ping() {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_ping(rpcOptions);
}

folly::Future<folly::Unit> CalculatorServiceAsyncClient::future_ping(apache::thrift::RpcOptions& rpcOptions) {
  folly::Promise<folly::Unit> promise3;
  auto future4 = promise3.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback5(new apache::thrift::FutureCallback<folly::Unit>(std::move(promise3), recv_wrapped_ping, channel_, (rpcOptions.getUseForReadHeaders() ? &rpcOptions : nullptr)));
  ping(rpcOptions, std::move(callback5));
  return std::move(future4);
}

void CalculatorServiceAsyncClient::ping(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  ping(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::exception_wrapper CalculatorServiceAsyncClient::recv_wrapped_ping(::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_pingT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_pingT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void CalculatorServiceAsyncClient::recv_ping(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_ping(state);
  if (ew) {
    ew.throwException();
  }
}

void CalculatorServiceAsyncClient::recv_instance_ping(::apache::thrift::ClientReceiveState& state) {
  recv_ping(state);
}

folly::exception_wrapper CalculatorServiceAsyncClient::recv_instance_wrapped_ping(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_ping(state);
}

void CalculatorServiceAsyncClient::calculate(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t logid, const  ::calculator::Work& w) {
  ::apache::thrift::RpcOptions rpcOptions;
  calculate(rpcOptions, std::move(callback), logid, w);
}

void CalculatorServiceAsyncClient::calculate(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t logid, const  ::calculator::Work& w) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      calculateT(&writer, rpcOptions, std::move(callback), logid, w);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      calculateT(&writer, rpcOptions, std::move(callback), logid, w);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

int32_t CalculatorServiceAsyncClient::sync_calculate(int32_t logid, const  ::calculator::Work& w) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_calculate(rpcOptions, logid, w);
}

int32_t CalculatorServiceAsyncClient::sync_calculate(apache::thrift::RpcOptions& rpcOptions, int32_t logid, const  ::calculator::Work& w) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback6(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  calculate(rpcOptions, std::move(callback6), logid, w);
  getChannel()->getEventBase()->loopForever();
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  return recv_calculate(_returnState);
}

folly::Future<int32_t> CalculatorServiceAsyncClient::future_calculate(int32_t logid, const  ::calculator::Work& w) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_calculate(rpcOptions, logid, w);
}

folly::Future<int32_t> CalculatorServiceAsyncClient::future_calculate(apache::thrift::RpcOptions& rpcOptions, int32_t logid, const  ::calculator::Work& w) {
  folly::Promise<int32_t> promise7;
  auto future8 = promise7.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback9(new apache::thrift::FutureCallback<int32_t>(std::move(promise7), recv_wrapped_calculate, channel_, (rpcOptions.getUseForReadHeaders() ? &rpcOptions : nullptr)));
  calculate(rpcOptions, std::move(callback9), logid, w);
  return std::move(future8);
}

void CalculatorServiceAsyncClient::calculate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t logid, const  ::calculator::Work& w) {
  calculate(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),logid,w);
}

folly::exception_wrapper CalculatorServiceAsyncClient::recv_wrapped_calculate(int32_t& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_calculateT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_calculateT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

int32_t CalculatorServiceAsyncClient::recv_calculate(::apache::thrift::ClientReceiveState& state) {
  int32_t _return;
  auto ew = recv_wrapped_calculate(_return, state);
  if (ew) {
    ew.throwException();
  }
  return _return;
}

int32_t CalculatorServiceAsyncClient::recv_instance_calculate(::apache::thrift::ClientReceiveState& state) {
  return recv_calculate(state);
}

folly::exception_wrapper CalculatorServiceAsyncClient::recv_instance_wrapped_calculate(int32_t& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_calculate(_return, state);
}

} // calculator
namespace apache { namespace thrift {

}} // apache::thrift