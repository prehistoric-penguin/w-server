/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "calculator_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/MoveWrapper.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace calculator {

} // calculator
namespace apache { namespace thrift {

}} // apache::thrift
namespace calculator {

template <class Protocol_>
uint32_t Work::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "num1") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "num2") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "op") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "comment") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num1);
          this->__isset.num1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num2);
          this->__isset.num2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->op = ( ::calculator::Operation)ecast0;
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Work::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Work");
  xfer += prot_->serializedFieldSize("num1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->num1);
  xfer += prot_->serializedFieldSize("num2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->num2);
  xfer += prot_->serializedFieldSize("op", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->op);
  if (this->__isset.comment) {
    xfer += prot_->serializedFieldSize("comment", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->comment);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Work::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Work");
  xfer += prot_->serializedFieldSize("num1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->num1);
  xfer += prot_->serializedFieldSize("num2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->num2);
  xfer += prot_->serializedFieldSize("op", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->op);
  if (this->__isset.comment) {
    xfer += prot_->serializedFieldSize("comment", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->comment);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Work::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Work");
  xfer += prot_->writeFieldBegin("num1", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->num1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("num2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->num2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("op", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)this->op);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.comment) {
    xfer += prot_->writeFieldBegin("comment", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeString(this->comment);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // calculator
namespace apache { namespace thrift {

}} // apache::thrift
namespace calculator {

template <class Protocol_>
uint32_t InvalidOperation::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "op") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "why") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->op = ( ::calculator::Operation)ecast1;
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t InvalidOperation::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("InvalidOperation");
  xfer += prot_->serializedFieldSize("op", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->op);
  xfer += prot_->serializedFieldSize("why", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->why);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t InvalidOperation::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("InvalidOperation");
  xfer += prot_->serializedFieldSize("op", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->op);
  xfer += prot_->serializedFieldSize("why", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->why);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t InvalidOperation::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("InvalidOperation");
  xfer += prot_->writeFieldBegin("op", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32((int32_t)this->op);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("why", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->why);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // calculator
namespace apache { namespace thrift {

}} // apache::thrift
namespace calculator {

} // calculator