/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CalculatorService.h"

#include "CalculatorService.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace calculator {

std::unique_ptr<apache::thrift::AsyncProcessor> CalculatorServiceSvIf::getProcessor() {
  return folly::make_unique<CalculatorServiceAsyncProcessor>(this);
}

void CalculatorServiceSvIf::ping() {
  throw apache::thrift::TApplicationException("Function ping is unimplemented");
}

folly::Future<folly::Unit> CalculatorServiceSvIf::future_ping() {
  return apache::thrift::detail::si::future([&] { return ping(); });
}

void CalculatorServiceSvIf::async_tm_ping(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_ping(); });
}

int32_t CalculatorServiceSvIf::calculate(int32_t /*logid*/, const  ::calculator::Work& /*w*/) {
  throw apache::thrift::TApplicationException("Function calculate is unimplemented");
}

folly::Future<int32_t> CalculatorServiceSvIf::future_calculate(int32_t logid, const  ::calculator::Work& w) {
  return apache::thrift::detail::si::future([&] { return calculate(logid, w); });
}

void CalculatorServiceSvIf::async_tm_calculate(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback, int32_t logid, const  ::calculator::Work& w) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_calculate(logid, w); });
}

void CalculatorServiceSvNull::ping() {}

int32_t CalculatorServiceSvNull::calculate(int32_t /*logid*/, const  ::calculator::Work& /*w*/) {
  return 0;
}

const char* CalculatorServiceAsyncProcessor::getServiceName() {
  return "CalculatorService";
}

folly::Optional<std::string> CalculatorServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void CalculatorServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool CalculatorServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> CalculatorServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> CalculatorServiceAsyncProcessor::cacheKeyMap_ {};
const CalculatorServiceAsyncProcessor::BinaryProtocolProcessMap& CalculatorServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

CalculatorServiceAsyncProcessor::BinaryProtocolProcessMap CalculatorServiceAsyncProcessor::binaryProcessMap_ {
  {"ping", &CalculatorServiceAsyncProcessor::_processInThread_ping<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"calculate", &CalculatorServiceAsyncProcessor::_processInThread_calculate<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
const CalculatorServiceAsyncProcessor::CompactProtocolProcessMap& CalculatorServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

CalculatorServiceAsyncProcessor::CompactProtocolProcessMap CalculatorServiceAsyncProcessor::compactProcessMap_ {
  {"ping", &CalculatorServiceAsyncProcessor::_processInThread_ping<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"calculate", &CalculatorServiceAsyncProcessor::_processInThread_calculate<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};

} // calculator
namespace apache { namespace thrift {

}} // apache::thrift